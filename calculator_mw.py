import json
import logging


def calculator(received_payload_data_string):
    try:

        """
        This function calculates the energy that needs to be generated by each
        powerplant to meet the load requirement. If the powerplants can not generate the
        enough energy to meet the load requirement, it returns a specific errormessage.
        If the payload file does not have the right layout, it returns a specific errormessage
        """
        # We extract necessary data from the payload file
        try:
            load = received_payload_data_string["load"]
            wind = received_payload_data_string["fuels"]["wind(%)"]
            maxMWHwind1 = received_payload_data_string["powerplants"][4]["pmax"]
            maxMWHwind2 = received_payload_data_string["powerplants"][5]["pmax"]
            maxMWHgas1 = received_payload_data_string["powerplants"][0]["pmax"]
            maxMWHgas2 = received_payload_data_string["powerplants"][1]["pmax"]
            maxMWHsmallgas1 = received_payload_data_string["powerplants"][2]["pmax"]
            maxMWHtj = received_payload_data_string["powerplants"][3]["pmax"]
            checkerror = "Empty"

            toReachMWH = load
            efficiencyWind1 = received_payload_data_string["powerplants"][4]["efficiency"]
            efficiencyWind2 = received_payload_data_string["powerplants"][5]["efficiency"]
            efficiencyGas1 = received_payload_data_string["powerplants"][0]["efficiency"]
            efficiencyGas2 = received_payload_data_string["powerplants"][1]["efficiency"]
            efficiencySmallGas1 = received_payload_data_string["powerplants"][2]["efficiency"]
            efficiencytj1 = received_payload_data_string["powerplants"][3]["efficiency"]

            # windturbines power production calculation and deducted from the load
            if wind > 0 and toReachMWH > 0 and efficiencyWind1 > 0:
                windMWHprod1 = wind / 100 * maxMWHwind1
                newtoReachMWH = toReachMWH - windMWHprod1
                if newtoReachMWH <= 0:
                    windMWHprod1 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                windMWHprod1 = 0

            # second windturbines power production calculation and deducted from whats left of the load
            if wind > 0 and toReachMWH > 0 and efficiencyWind2 > 0:
                windMWHprod2 = wind / 100 * maxMWHwind2
                newtoReachMWH = toReachMWH - windMWHprod2
                if newtoReachMWH <= 0:
                    windMWHprod2 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                windMWHprod2 = 0

            # gasfired plant big1 power production calculation and deducted from whats left of the load
            if toReachMWH > 0 and efficiencyGas1 > 0:
                gasMWHprod1 = efficiencyGas1 * maxMWHgas1
                newtoReachMWH = toReachMWH - gasMWHprod1
                if newtoReachMWH <= 0:
                    gasMWHprod1 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                gasMWHprod1 = 0

            # gasfired plant big2 power production calculation and deducted from whats left of the load
            if toReachMWH > 0 and efficiencyGas2 > 0:
                gasMWHprod2 = efficiencyGas2 * maxMWHgas2
                newtoReachMWH = toReachMWH - gasMWHprod2
                if newtoReachMWH <= 0:
                    gasMWHprod2 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                gasMWHprod2 = 0

            # smallgasplant power production calculation and deducted from whats left of the load
            if toReachMWH > 0 and efficiencySmallGas1 > 0:
                smallgasMWHprod1 = efficiencySmallGas1 * maxMWHsmallgas1
                newtoReachMWH = toReachMWH - smallgasMWHprod1
                if newtoReachMWH <= 0:
                    smallgasMWHprod1 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                smallgasMWHprod1 = 0

            # turbojet plant power production calculation and deducted from whats left of the load
            if toReachMWH > 0 and efficiencytj1 > 0:
                tjMWHprod1 = efficiencytj1 * maxMWHtj
                newtoReachMWH = toReachMWH - tjMWHprod1
                if newtoReachMWH <= 0:
                    tjMWHprod1 = toReachMWH
                    toReachMWH = newtoReachMWH
                else:
                    toReachMWH = newtoReachMWH
            else:
                tjMWHprod1 = 0

            # if there is still something left of the total load to be produced, show error message
            if toReachMWH > 0:
                checkerror = "There are not enough operational powerplants to produce the load. Please reduce the payload " \
                             "and try again."

            # We create all elements of to be shown on the screen and put it in a list
            errors = {"error": checkerror}
            windpark1dic = {"name": "windpark1", "p": round(windMWHprod1, 1)}
            windpark2dic = {"name": "windpark2", "p": round(windMWHprod2, 1)}
            gasfiredbig1 = {"name": "gasfired1", "p": round(gasMWHprod1, 1)}
            gasfiredbig2 = {"name": "gasfired2", "p": round(gasMWHprod2, 1)}
            gasfiredsmall1 = {"name": "gasfiredsomewhatsmaller", "p": round(smallgasMWHprod1, 1)}
            tj1 = {"name": "tj1", "p": round(tjMWHprod1, 1)}
            listofanswers = [windpark1dic, windpark2dic, gasfiredbig1, gasfiredbig2, gasfiredsmall1, tj1]

            # list in a dump comes out as string with json identation
            answered_response_calculated = json.dumps(listofanswers, indent=4)
            return answered_response_calculated, errors

        except TypeError:
            checkerror = "The file does not have the right layout, please use the same layout as mentioned in the README.md"
            errors = {"error": checkerror}
            emptylist = ['']
            answered_response_calculated = json.dumps(emptylist, indent=4)
            return answered_response_calculated, errors
        except KeyError:
            checkerror = "The file does not have the right layout, please use the same layout as mentioned in the README.md"
            errors = {"error": checkerror}
            emptylist = ['']
            answered_response_calculated = json.dumps(emptylist, indent=4)
            return answered_response_calculated, errors
    except Exception as e:
        logging.warning(f"Exception in calculator_mw.py = {e}")
